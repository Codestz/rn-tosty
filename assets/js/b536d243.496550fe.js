"use strict";(self.webpackChunkrn_tosty_docs=self.webpackChunkrn_tosty_docs||[]).push([[334],{4932:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"advanced/promise-integration","title":"Promise Integration \u26a1","description":"One of RN-Tosty\'s most powerful features is seamless promise integration. Handle async operations with beautiful loading states, automatic success/error handling, and smooth transitions.","source":"@site/docs/advanced/promise-integration.md","sourceDirName":"advanced","slug":"/advanced/promise-integration","permalink":"/rn-tosty/docs/advanced/promise-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/codestz/rn-tosty/tree/main/docs/docs/advanced/promise-integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Understanding Variants \ud83d\udd27","permalink":"/rn-tosty/docs/variants/understanding-variants"},"next":{"title":"API Overview \ud83d\udd0c","permalink":"/rn-tosty/docs/api/overview"}}');var a=s(4848),i=s(8453);const o={},t="Promise Integration \u26a1",l={},c=[{value:"\ud83d\ude80 The Magic of Promise Toasts",id:"-the-magic-of-promise-toasts",level:2},{value:"\ud83d\udcda Basic Usage",id:"-basic-usage",level:2},{value:"Simple Promise Handling",id:"simple-promise-handling",level:3},{value:"Dynamic Messages",id:"dynamic-messages",level:3},{value:"\ud83c\udfa8 Advanced Configuration",id:"-advanced-configuration",level:2},{value:"Custom Loading Icons",id:"custom-loading-icons",level:3},{value:"Progress Configuration",id:"progress-configuration",level:3},{value:"Multiple Step Operations",id:"multiple-step-operations",level:3},{value:"\ud83c\udfaf Real-World Examples",id:"-real-world-examples",level:2},{value:"E-commerce Checkout",id:"e-commerce-checkout",level:3},{value:"File Upload with Progress",id:"file-upload-with-progress",level:3},{value:"Social Media Post",id:"social-media-post",level:3},{value:"Data Sync with Retry",id:"data-sync-with-retry",level:3},{value:"\ud83c\udf9b\ufe0f Configuration Options",id:"\ufe0f-configuration-options",level:2},{value:"Promise Messages Configuration",id:"promise-messages-configuration",level:3},{value:"Promise Configuration",id:"promise-configuration",level:3},{value:"\ud83c\udfa8 Loading Icon Types",id:"-loading-icon-types",level:2},{value:"Spinner (Default)",id:"spinner-default",level:3},{value:"Dots",id:"dots",level:3},{value:"Bars",id:"bars",level:3},{value:"Pulse",id:"pulse",level:3},{value:"Custom Icons",id:"custom-icons",level:3},{value:"\ud83d\udd27 Error Handling Strategies",id:"-error-handling-strategies",level:2},{value:"Graceful Error Messages",id:"graceful-error-messages",level:3},{value:"Type-Safe Error Handling",id:"type-safe-error-handling",level:3},{value:"\ud83d\ude80 Performance Tips",id:"-performance-tips",level:2},{value:"1. <strong>Avoid Promise Spam</strong>",id:"1-avoid-promise-spam",level:3},{value:"2. <strong>Smart Duration Settings</strong>",id:"2-smart-duration-settings",level:3},{value:"3. <strong>Memory Management</strong>",id:"3-memory-management",level:3},{value:"\ud83c\udfaf Best Practices",id:"-best-practices",level:2},{value:"1. <strong>Clear Loading Messages</strong>",id:"1-clear-loading-messages",level:3},{value:"2. <strong>Helpful Success Messages</strong>",id:"2-helpful-success-messages",level:3},{value:"3. <strong>User-Friendly Error Messages</strong>",id:"3-user-friendly-error-messages",level:3},{value:"4. <strong>Appropriate Icons</strong>",id:"4-appropriate-icons",level:3},{value:"\ud83d\ude80 Next Steps",id:"-next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"promise-integration-",children:"Promise Integration \u26a1"})}),"\n",(0,a.jsx)(n.p,{children:"One of RN-Tosty's most powerful features is seamless promise integration. Handle async operations with beautiful loading states, automatic success/error handling, and smooth transitions."}),"\n",(0,a.jsx)(n.h2,{id:"-the-magic-of-promise-toasts",children:"\ud83d\ude80 The Magic of Promise Toasts"}),"\n",(0,a.jsx)(n.p,{children:"Traditional approach (verbose and error-prone):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// \u274c Old way - manual state management\nconst [loading, setLoading] = useState(false);\n\nconst handleSave = async () => {\n  setLoading(true);\n  toast.info('Saving...'); // Manual loading toast\n\n  try {\n    const result = await api.saveProfile(data);\n    toast.dismiss(); // Remember to dismiss loading\n    toast.success('Profile saved!');\n    return result;\n  } catch (error) {\n    toast.dismiss(); // Don't forget this!\n    toast.error('Save failed!');\n    throw error;\n  } finally {\n    setLoading(false);\n  }\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:"RN-Tosty approach (elegant and automatic):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// \u2705 New way - automatic state management\nconst handleSave = () => {\n  return toast.promise(api.saveProfile(data), {\n    loading: 'Saving your profile...',\n    success: 'Profile saved successfully!',\n    error: 'Failed to save profile',\n  });\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"What happens automatically:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"\ud83d\udd04 Loading toast appears with spinner animation"}),"\n",(0,a.jsx)(n.li,{children:"\u23f1\ufe0f Progress bar shows estimated time remaining"}),"\n",(0,a.jsx)(n.li,{children:"\u2705 Seamlessly transitions to success toast on resolve"}),"\n",(0,a.jsx)(n.li,{children:"\u274c Or transitions to error toast on rejection"}),"\n",(0,a.jsx)(n.li,{children:"\ud83e\uddf9 Automatically cleans up and manages state"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"-basic-usage",children:"\ud83d\udcda Basic Usage"}),"\n",(0,a.jsx)(n.h3,{id:"simple-promise-handling",children:"Simple Promise Handling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { toast } from 'rn-tosty';\n\n// Basic promise integration\nconst uploadFile = async (file) => {\n  return toast.promise(\n    api.uploadFile(file), // Your promise\n    {\n      loading: 'Uploading file...',\n      success: 'File uploaded successfully!',\n      error: 'Upload failed',\n    }\n  );\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"dynamic-messages",children:"Dynamic Messages"}),"\n",(0,a.jsx)(n.p,{children:"Messages can be functions that receive the resolved/rejected value:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const saveUser = async (userData) => {\n  return toast.promise(api.createUser(userData), {\n    loading: 'Creating user account...',\n    success: (user) => `Welcome, ${user.name}! Your account is ready.`,\n    error: (error) => `Failed to create account: ${error.message}`,\n  });\n};\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-advanced-configuration",children:"\ud83c\udfa8 Advanced Configuration"}),"\n",(0,a.jsx)(n.h3,{id:"custom-loading-icons",children:"Custom Loading Icons"}),"\n",(0,a.jsx)(n.p,{children:"Choose from different loading animations:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"toast.promise(fetchData(), {\n  loading: {\n    message: 'Loading your data...',\n    icon: {\n      type: 'spinner', // 'spinner', 'dots', 'bars', 'pulse'\n      size: 'large', // 'small', 'medium', 'large', or number\n      color: '#3B82F6', // Custom color\n    },\n  },\n  success: 'Data loaded!',\n  error: 'Loading failed',\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"progress-configuration",children:"Progress Configuration"}),"\n",(0,a.jsx)(n.p,{children:"Control the progress bar appearance:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"toast.promise(\n  processData(),\n  {\n    loading: 'Processing...',\n    success: 'Complete!',\n    error: 'Failed!',\n  },\n  {\n    // Toast configuration applies to all states\n    position: 'bottom',\n    layout: { iconPosition: 'right' },\n    progressBar: {\n      enabled: true,\n      position: 'top',\n      color: '#10B981',\n      height: 4,\n    },\n  }\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"multiple-step-operations",children:"Multiple Step Operations"}),"\n",(0,a.jsx)(n.p,{children:"Handle complex multi-step operations:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const syncAllData = async () => {\n  const steps = [\n    { fn: () => api.syncUsers(), message: 'Syncing users...' },\n    { fn: () => api.syncPosts(), message: 'Syncing posts...' },\n    { fn: () => api.syncComments(), message: 'Syncing comments...' },\n  ];\n\n  const results = [];\n\n  for (let i = 0; i < steps.length; i++) {\n    const step = steps[i];\n    const result = await toast.promise(step.fn(), {\n      loading: `${step.message} (${i + 1}/${steps.length})`,\n      success: (data) =>\n        `${step.message.replace('ing...', 'ed!')} ${data.length} items`,\n      error: (err) => `${step.message.replace('Syncing', 'Failed to sync')}`,\n    });\n    results.push(result);\n  }\n\n  return results;\n};\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-real-world-examples",children:"\ud83c\udfaf Real-World Examples"}),"\n",(0,a.jsx)(n.h3,{id:"e-commerce-checkout",children:"E-commerce Checkout"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const processCheckout = async (orderData) => {\n  // Step 1: Validate payment\n  const payment = await toast.promise(api.validatePayment(orderData.payment), {\n    loading: {\n      message: 'Validating payment method...',\n      icon: { type: 'spinner', size: 'medium' },\n    },\n    success: 'Payment method validated \u2713',\n    error: (err) => `Payment validation failed: ${err.message}`,\n  });\n\n  // Step 2: Process order\n  const order = await toast.promise(\n    api.processOrder({ ...orderData, paymentId: payment.id }),\n    {\n      loading: {\n        message: 'Processing your order...',\n        icon: { type: 'bars', size: 'large' },\n      },\n      success: (order) => `Order #${order.id} confirmed! \ud83c\udf89`,\n      error: 'Order processing failed. Your card was not charged.',\n    },\n    {\n      duration: 6000, // Show success longer\n      priority: 'high',\n    }\n  );\n\n  return order;\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"file-upload-with-progress",children:"File Upload with Progress"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const uploadImages = async (images) => {\n  const uploads = images.map(async (image, index) => {\n    return toast.promise(\n      api.uploadImage(image),\n      {\n        loading: {\n          message: `Uploading ${image.name}... (${index + 1}/${images.length})`,\n          icon: { type: 'pulse', color: '#3B82F6' },\n        },\n        success: (result) => `\ud83d\udcf8 ${image.name} uploaded (${result.size} KB)`,\n        error: (err) => `\u274c Failed to upload ${image.name}: ${err.message}`,\n      },\n      {\n        position: 'bottom',\n        duration: 3000,\n      }\n    );\n  });\n\n  return Promise.all(uploads);\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"social-media-post",children:"Social Media Post"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const publishPost = async (postData) => {\n  return toast.promise(\n    api.createPost(postData),\n    {\n      loading: {\n        message: 'Publishing your post...',\n        icon: { type: 'dots', size: 'medium' },\n      },\n      success: (post) => {\n        const likes = post.likes || 0;\n        const shares = post.shares || 0;\n        return `\ud83c\udf89 Post published! ${likes} likes, ${shares} shares`;\n      },\n      error: (error) => {\n        if (error.code === 'CONTENT_MODERATION') {\n          return '\ud83d\udeab Post blocked by content moderation';\n        }\n        return `\ud83d\ude14 Failed to publish: ${error.message}`;\n      },\n    },\n    {\n      variant: 'social-success', // Custom variant for social actions\n      duration: 5000,\n    }\n  );\n};\n"})}),"\n",(0,a.jsx)(n.h3,{id:"data-sync-with-retry",children:"Data Sync with Retry"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const syncWithRetry = async (data, maxRetries = 3) => {\n  let attempt = 0;\n\n  const attemptSync = async () => {\n    attempt++;\n\n    try {\n      return await api.syncData(data);\n    } catch (error) {\n      if (attempt < maxRetries && error.code === 'NETWORK_ERROR') {\n        // Wait before retry\n        await new Promise((resolve) => setTimeout(resolve, 1000 * attempt));\n        return attemptSync();\n      }\n      throw error;\n    }\n  };\n\n  return toast.promise(attemptSync(), {\n    loading: {\n      message: 'Syncing data...',\n      icon: { type: 'spinner' },\n    },\n    success: (result) => `\u2705 Synced ${result.count} items successfully`,\n    error: (error) => {\n      if (attempt >= maxRetries) {\n        return `\u274c Sync failed after ${maxRetries} attempts: ${error.message}`;\n      }\n      return `\u274c Sync failed: ${error.message}`;\n    },\n  });\n};\n"})}),"\n",(0,a.jsx)(n.h2,{id:"\ufe0f-configuration-options",children:"\ud83c\udf9b\ufe0f Configuration Options"}),"\n",(0,a.jsx)(n.h3,{id:"promise-messages-configuration",children:"Promise Messages Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"interface PromiseMessages<T> {\n  loading:\n    | string\n    | {\n        message: string;\n        icon?: {\n          type: 'spinner' | 'dots' | 'bars' | 'pulse';\n          size?: 'small' | 'medium' | 'large' | number;\n          color?: string;\n          animated?: boolean;\n        };\n      };\n  success: string | ((data: T) => string);\n  error: string | ((error: Error) => string);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"promise-configuration",children:"Promise Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"interface PromiseConfig {\n  // Standard toast configuration\n  position?: 'top' | 'bottom';\n  priority?: 'low' | 'medium' | 'high' | 'urgent';\n  variant?: string;\n\n  // Layout options\n  layout?: {\n    iconPosition?: 'left' | 'right';\n    textAlignment?: 'left' | 'center' | 'right';\n    spacing?: 'compact' | 'default' | 'spacious';\n  };\n\n  // Progress bar (applies to loading state)\n  progressBar?: {\n    enabled?: boolean;\n    position?: 'top' | 'bottom';\n    color?: string;\n    height?: number;\n  };\n\n  // Duration overrides\n  duration?: {\n    loading?: number; // How long to show loading (0 = until resolved)\n    success?: number; // Success toast duration\n    error?: number; // Error toast duration\n  };\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-loading-icon-types",children:"\ud83c\udfa8 Loading Icon Types"}),"\n",(0,a.jsx)(n.h3,{id:"spinner-default",children:"Spinner (Default)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"icon: {\n  type: 'spinner';\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Classic spinning circle - works great for most operations."}),"\n",(0,a.jsx)(n.h3,{id:"dots",children:"Dots"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"icon: {\n  type: 'dots';\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Three bouncing dots - perfect for messaging or chat operations."}),"\n",(0,a.jsx)(n.h3,{id:"bars",children:"Bars"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"icon: {\n  type: 'bars';\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Animated equalizer bars - great for audio/video processing or data analysis."}),"\n",(0,a.jsx)(n.h3,{id:"pulse",children:"Pulse"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"icon: {\n  type: 'pulse';\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pulsing circle - ideal for sync operations or heartbeat-like processes."}),"\n",(0,a.jsx)(n.h3,{id:"custom-icons",children:"Custom Icons"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { CustomIconComponent } from 'rn-tosty';\n\nconst CustomLoadingIcon: CustomIconComponent = ({ size, color }) => (\n  <YourAnimatedIcon size={size} color={color} />\n);\n\ntoast.promise(operation(), {\n  loading: {\n    message: 'Processing...',\n    icon: CustomLoadingIcon,\n  },\n  // ...\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-error-handling-strategies",children:"\ud83d\udd27 Error Handling Strategies"}),"\n",(0,a.jsx)(n.h3,{id:"graceful-error-messages",children:"Graceful Error Messages"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const handleApiError = (error) => {\n  // Network errors\n  if (error.code === 'NETWORK_ERROR') {\n    return 'Connection lost. Please check your internet.';\n  }\n\n  // Server errors\n  if (error.status >= 500) {\n    return 'Server error. Our team has been notified.';\n  }\n\n  // Client errors\n  if (error.status === 401) {\n    return 'Session expired. Please log in again.';\n  }\n\n  if (error.status === 403) {\n    return \"You don't have permission for this action.\";\n  }\n\n  // Default fallback\n  return error.message || 'Something went wrong. Please try again.';\n};\n\n// Use in promise\ntoast.promise(riskyOperation(), {\n  loading: 'Processing...',\n  success: 'Done!',\n  error: handleApiError,\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"type-safe-error-handling",children:"Type-Safe Error Handling"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"interface ApiError {\n  code: string;\n  message: string;\n  details?: any;\n}\n\nconst typedApiCall = (): Promise<{ id: string; name: string }> => {\n  return api.getData();\n};\n\ntoast.promise(typedApiCall(), {\n  loading: 'Loading data...',\n  success: (data) => `Loaded ${data.name} successfully!`,\n  error: (error: ApiError) => {\n    switch (error.code) {\n      case 'NOT_FOUND':\n        return 'Data not found. It may have been deleted.';\n      case 'PERMISSION_DENIED':\n        return 'Access denied. Please contact your administrator.';\n      default:\n        return `Error: ${error.message}`;\n    }\n  },\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-performance-tips",children:"\ud83d\ude80 Performance Tips"}),"\n",(0,a.jsxs)(n.h3,{id:"1-avoid-promise-spam",children:["1. ",(0,a.jsx)(n.strong,{children:"Avoid Promise Spam"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// \u274c Don't create promise toast for every action\nonClick={() => {\n  // These will create multiple loading toasts\n  toast.promise(api.like(postId), { /* ... */ });\n  toast.promise(api.follow(userId), { /* ... */ });\n  toast.promise(api.bookmark(postId), { /* ... */ });\n}}\n\n// \u2705 Batch operations or use different approaches\nonClick={() => {\n  // Option 1: Batch the operations\n  toast.promise(\n    Promise.all([\n      api.like(postId),\n      api.follow(userId),\n      api.bookmark(postId)\n    ]),\n    {\n      loading: 'Processing actions...',\n      success: 'All actions completed!',\n      error: 'Some actions failed'\n    }\n  );\n\n  // Option 2: Use regular toasts for quick actions\n  api.like(postId).then(() => toast.success('Post liked!'));\n}}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"2-smart-duration-settings",children:["2. ",(0,a.jsx)(n.strong,{children:"Smart Duration Settings"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// Quick operations - shorter durations\ntoast.promise(\n  quickSave(),\n  {\n    /* messages */\n  },\n  { duration: { success: 2000, error: 4000 } }\n);\n\n// Important operations - longer durations\ntoast.promise(\n  criticalUpdate(),\n  {\n    /* messages */\n  },\n  { duration: { success: 5000, error: 8000 } }\n);\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"3-memory-management",children:["3. ",(0,a.jsx)(n.strong,{children:"Memory Management"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// For long-running operations, store the promise reference\nconst longOperation = useRef<Promise<any> | null>(null);\n\nconst handleLongOperation = () => {\n  // Cancel previous operation if still running\n  if (longOperation.current) {\n    toast.dismiss(); // Clear any existing promise toasts\n  }\n\n  longOperation.current = toast.promise(heavyComputation(), {\n    /* configuration */\n  });\n};\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-best-practices",children:"\ud83c\udfaf Best Practices"}),"\n",(0,a.jsxs)(n.h3,{id:"1-clear-loading-messages",children:["1. ",(0,a.jsx)(n.strong,{children:"Clear Loading Messages"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// \u274c Vague\nloading: 'Loading...';\n\n// \u2705 Specific\nloading: 'Uploading your profile photo...';\nloading: 'Saving draft to cloud...';\nloading: 'Processing payment...';\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"2-helpful-success-messages",children:["2. ",(0,a.jsx)(n.strong,{children:"Helpful Success Messages"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// \u274c Generic\nsuccess: 'Success!';\n\n// \u2705 Informative\nsuccess: (user) => `Welcome, ${user.name}! Your account is ready.`;\nsuccess: (result) => `${result.count} items synced successfully`;\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"3-user-friendly-error-messages",children:["3. ",(0,a.jsx)(n.strong,{children:"User-Friendly Error Messages"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// \u274c Technical\nerror: (err) => `HTTP 500: ${err.stack}`;\n\n// \u2705 User-friendly\nerror: (err) => {\n  if (err.code === 'NETWORK_ERROR') {\n    return 'Check your internet connection and try again.';\n  }\n  return 'Something went wrong. Please try again.';\n};\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"4-appropriate-icons",children:["4. ",(0,a.jsx)(n.strong,{children:"Appropriate Icons"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// File operations\nicon: {\n  type: 'bars';\n}\n\n// Network requests\nicon: {\n  type: 'spinner';\n}\n\n// Real-time sync\nicon: {\n  type: 'pulse';\n}\n\n// Messaging\nicon: {\n  type: 'dots';\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"-next-steps",children:"\ud83d\ude80 Next Steps"}),"\n",(0,a.jsx)(n.p,{children:"Master promise integration with these advanced topics:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./queue-management",children:"Queue Management \u2192"})})," - Handle multiple promises"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./custom-icons",children:"Custom Icons \u2192"})})," - Create custom loading animations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"./error-handling",children:"Error Handling \u2192"})})," - Robust error management"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"../examples/best-practices",children:"Performance \u2192"})})," - Optimization strategies"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"\u26a1 Promise integration transforms async operations"})," from boring loading spinners into delightful, informative experiences that keep users engaged!"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var r=s(6540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);